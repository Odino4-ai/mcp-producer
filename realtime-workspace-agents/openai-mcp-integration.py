#!/usr/bin/env python3
"""
Integration OpenAI Agents SDK + MCP Notion Server
Connecte le serveur MCP Notion au SDK OpenAI Agents
"""

import asyncio
import os
from pathlib import Path

# Import OpenAI Agents SDK avec MCP
try:
    from openai import OpenAI
    from agents import Agent, Runner
    from agents.mcp import MCPServerStdio
except ImportError as e:
    print("‚ùå Erreur d'import:", e)
    print("üí° Installez les d√©pendances:")
    print("   pip install openai-agents")
    exit(1)


class NotionMCPIntegration:
    """Int√©gration MCP Notion avec OpenAI SDK"""
    
    def __init__(self):
        self.current_dir = Path(__file__).parent
        self.mcp_server_path = self.current_dir / "mcp-notion-server.py"
        
    async def create_notion_agent(self):
        """Cr√©e un agent OpenAI avec acc√®s au serveur MCP Notion"""
        
        # Configuration du serveur MCP Notion en mode Stdio
        async with MCPServerStdio(
            name="Notion MCP Server",
            params={
                "command": "python3",
                "args": [str(self.mcp_server_path)],
                "cwd": str(self.current_dir),
                "env": {
                    "NOTION_TOKEN": os.getenv("NOTION_TOKEN", ""),
                    "PYTHONPATH": str(self.current_dir)
                }
            },
        ) as mcp_server:
            
            # Cr√©ation de l'agent avec acc√®s MCP
            agent = Agent(
                name="NotionExpert",
                instructions="""
                Vous √™tes un expert Notion silencieux et proactif.
                
                üéØ R√àGLES ABSOLUES:
                - Vous √©coutez TOUT en silence
                - Vous agissez IMM√âDIATEMENT quand un projet est mentionn√©
                - Vous cr√©ez des structures COMPL√àTES et ANTICIPATOIRES
                
                üèóÔ∏è CR√âATION DE PROJETS:
                D√®s qu'un nouveau projet est mentionn√©, vous cr√©ez IMM√âDIATEMENT:
                - Page principale avec description compl√®te
                - Structure de dossiers logique et compl√®te
                - Bases de donn√©es pour t√¢ches, √©quipe, ressources
                - Liste de t√¢ches initiale avec t√¢ches anticip√©es
                - Planning provisoire
                - Sections pour notes de r√©union
                
                üìã LISTES DE T√ÇCHES AUTOMATIQUES:
                - Cr√©ez et mettez √† jour les to-do lists en temps r√©el
                - Ajoutez automatiquement les t√¢ches mentionn√©es
                - Assignez aux bonnes personnes
                - D√©finissez priorit√©s et √©ch√©ances
                - Organisez par projet et personne
                
                üîÑ MISES √Ä JOUR CONTINUES:
                - Mettez √† jour Notion en temps r√©el pendant la conversation
                - Adaptez la structure selon les nouvelles informations
                - Enrichissez automatiquement le contenu
                - Anticipez les besoins futurs du projet
                
                Utilisez les outils MCP Notion disponibles pour toutes ces op√©rations.
                """,
                mcp_servers=[mcp_server]
            )
            
            return agent, mcp_server
    
    async def test_notion_integration(self):
        """Test de l'int√©gration Notion MCP"""
        
        print("üöÄ Test de l'int√©gration OpenAI + MCP Notion...")
        
        try:
            agent, mcp_server = await self.create_notion_agent()
            
            # Test de cr√©ation de projet
            test_message = """
            Je commence un nouveau projet appel√© "Application Mobile E-commerce".
            C'est une application mobile pour vendre des produits en ligne.
            L'√©quipe comprend: Alice (d√©veloppeuse), Bob (designer), Charlie (chef de projet).
            Nous devons commencer par la conception, puis le d√©veloppement, les tests et le d√©ploiement.
            """
            
            print(f"üìù Test avec le message: {test_message}\n")
            
            # Ex√©cution avec l'agent
            result = await Runner.run(
                starting_agent=agent,
                input=test_message
            )
            
            print("‚úÖ R√©sultat de l'agent:")
            print(result.final_output)
            
            # Test de mise √† jour de t√¢ches
            update_message = """
            Pour le projet Application Mobile E-commerce, ajoutons ces nouvelles t√¢ches:
            - Cr√©er les wireframes (Alice, priorit√© haute, due dans 3 jours)
            - Rechercher les APIs de paiement (Bob, priorit√© moyenne)
            - Planifier le sprint 1 (Charlie, priorit√© haute, due demain)
            """
            
            print(f"\nüìã Test de mise √† jour avec: {update_message}\n")
            
            result2 = await Runner.run(
                starting_agent=agent,
                input=update_message
            )
            
            print("‚úÖ R√©sultat de la mise √† jour:")
            print(result2.final_output)
            
        except Exception as e:
            print(f"‚ùå Erreur lors du test: {e}")
            print(f"üí° D√©tails: {type(e).__name__}")
    
    async def run_interactive_mode(self):
        """Mode interactif avec l'agent Notion"""
        
        print("üéØ Mode interactif - Agent Notion Expert")
        print("üí¨ Parlez de vos projets, l'agent va automatiquement cr√©er les structures Notion")
        print("‚ùå Tapez 'quit' pour quitter\n")
        
        try:
            agent, mcp_server = await self.create_notion_agent()
            
            while True:
                try:
                    user_input = input("üë§ Vous: ").strip()
                    
                    if user_input.lower() in ['quit', 'exit', 'q']:
                        break
                    
                    if not user_input:
                        continue
                    
                    print("ü§ñ Agent Notion en action...")
                    
                    result = await Runner.run(
                        starting_agent=agent,
                        input=user_input
                    )
                    
                    print(f"‚úÖ Action termin√©e: {result.final_output}\n")
                    
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    print(f"‚ùå Erreur: {e}\n")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'initialisation: {e}")
        
        print("üëã Agent Notion arr√™t√©")


async def main():
    """Point d'entr√©e principal"""
    
    # V√©rification des pr√©requis
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå OPENAI_API_KEY non d√©fini")
        print("üí° D√©finissez votre cl√© API OpenAI:")
        print("   export OPENAI_API_KEY='your-api-key'")
        return
    
    integration = NotionMCPIntegration()
    
    # V√©rification du serveur MCP
    if not integration.mcp_server_path.exists():
        print(f"‚ùå Serveur MCP non trouv√©: {integration.mcp_server_path}")
        print("üí° Assurez-vous que mcp-notion-server.py existe")
        return
    
    print("üîó Int√©gration OpenAI Agents SDK + MCP Notion")
    print("="*50)
    
    mode = input("Choisissez le mode (1=Test, 2=Interactif): ").strip()
    
    if mode == "1":
        await integration.test_notion_integration()
    elif mode == "2":
        await integration.run_interactive_mode()
    else:
        print("‚ùå Mode invalide")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Programme arr√™t√©")
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
