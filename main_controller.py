#!/usr/bin/env python3
"""
Contr√¥leur Principal - Voice File Controller
Menu principal pour acc√©der √† tous les outils de test et au contr√¥leur vocal
"""
import asyncio
import subprocess
import sys
from pathlib import Path

class MainController:
    def __init__(self):
        self.base_path = Path(__file__).parent
        
    def show_main_menu(self):
        """Menu principal unifi√©"""
        print("\n" + "="*70)
        print("üé§ VOICE FILE CONTROLLER - MENU PRINCIPAL")
        print("="*70)
        print("üß™ TESTS MANUELS:")
        print("  1 - Testeur MCP Manuel (cr√©er dossiers/fichiers √† la main)")
        print("  2 - Test audio simple (sans OpenAI)")
        print("  3 - Test connexion OpenAI (avec debug)")
        print()
        print("üé§ CONTR√îLEUR VOCAL:")
        print("  4 - Contr√¥leur Vocal ‚Üí MCP (RECOMMAND√â)")
        print("  5 - Contr√¥leur Vocal Final (OpenAI Realtime API)")
        print("  6 - Contr√¥leur avec corrections (version debug)")
        print()
        print("üîß OUTILS DE D√âVELOPPEMENT:")
        print("  7 - Serveur MCP (pour Claude Desktop)")
        print("  8 - Tests unitaires des fonctions")
        print("  9 - Debugger de transcription")
        print()
        print("üìö AIDE:")
        print("  h - Afficher l'aide et les descriptions")
        print("  q - Quitter")
        print("="*70)
    
    def show_help(self):
        """Afficher l'aide d√©taill√©e"""
        print("\n" + "="*70)
        print("üìö AIDE - VOICE FILE CONTROLLER")
        print("="*70)
        
        print("\nüß™ TESTS MANUELS:")
        print("  1 - Testeur MCP Manuel")
        print("      ‚Üí Testez les fonctions de cr√©ation de dossiers/fichiers")
        print("      ‚Üí Interface interactive pour tester toutes les fonctions MCP")
        print("      ‚Üí Parfait pour v√©rifier que les fonctions de base marchent")
        
        print("\n  2 - Test Audio Simple") 
        print("      ‚Üí Teste uniquement la capture audio (sans OpenAI)")
        print("      ‚Üí Feedback visuel en temps r√©el")
        print("      ‚Üí Diagnostic des probl√®mes de microphone")
        
        print("\n  3 - Test Connexion OpenAI")
        print("      ‚Üí Teste la connexion WebSocket avec OpenAI")
        print("      ‚Üí Debug des probl√®mes de r√©seau")
        print("      ‚Üí Test de transcription audio")
        
        print("\nüé§ CONTR√îLEUR VOCAL:")
        print("  4 - Contr√¥leur Vocal Final")
        print("      ‚Üí Version finale bas√©e sur la documentation OpenAI")
        print("      ‚Üí Impl√©mentation correcte des √©v√©nements WebSocket")
        print("      ‚Üí Fonctions MCP int√©gr√©es (cr√©er dossiers/fichiers)")
        
        print("\n  5 - Contr√¥leur avec Corrections")
        print("      ‚Üí Version avec corrections de bugs")
        print("      ‚Üí Plus de debug et feedback visuel")
        print("      ‚Üí Utile pour diagnostiquer les probl√®mes")
        
        print("\nüîß OUTILS DE D√âVELOPPEMENT:")
        print("  6 - Serveur MCP")
        print("      ‚Üí Lance le serveur MCP pour Claude Desktop")
        print("      ‚Üí Permet √† Claude d'utiliser les fonctions de fichiers")
        
        print("\n  7 - Tests Unitaires")
        print("      ‚Üí Tests automatis√©s des fonctions MCP")
        print("      ‚Üí V√©rification que tout fonctionne correctement")
        
        print("\nüí° RECOMMANDATIONS D'USAGE:")
        print("  ‚Ä¢ Commencez par le test 1 pour v√©rifier les fonctions de base")
        print("  ‚Ä¢ Utilisez le test 2 si vous avez des probl√®mes de microphone")
        print("  ‚Ä¢ Le test 3 pour diagnostiquer les probl√®mes OpenAI")
        print("  ‚Ä¢ Le contr√¥leur 4 est la version finale recommand√©e")
        print("  ‚Ä¢ Le contr√¥leur 5 pour d√©boguer les probl√®mes audio")
        
        print("="*70)
    
    def run_script(self, script_name, description):
        """Ex√©cuter un script Python"""
        script_path = self.base_path / script_name
        
        if not script_path.exists():
            print(f"‚ùå Script non trouv√©: {script_name}")
            return False
        
        print(f"\nüöÄ Lancement: {description}")
        print(f"üìÅ Script: {script_name}")
        print("-" * 50)
        
        try:
            # Lancer le script dans le m√™me environnement
            result = subprocess.run([
                sys.executable, str(script_path)
            ], cwd=str(self.base_path))
            
            if result.returncode == 0:
                print(f"\n‚úÖ {description} termin√© avec succ√®s")
            else:
                print(f"\n‚ö†Ô∏è {description} termin√© avec code: {result.returncode}")
            
            return True
            
        except KeyboardInterrupt:
            print(f"\n‚èπÔ∏è {description} interrompu par l'utilisateur")
            return True
        except Exception as e:
            print(f"\n‚ùå Erreur lors du lancement: {e}")
            return False
    
    def run_tests(self):
        """Ex√©cuter les tests unitaires"""
        print("\nüß™ Ex√©cution des tests unitaires...")
        
        # Tests basiques des fonctions MCP
        try:
            from pathlib import Path
            import tempfile
            import shutil
            
            print("  ‚úì Test d'import des modules")
            
            # Test cr√©ation dossier temporaire
            with tempfile.TemporaryDirectory() as temp_dir:
                test_folder = Path(temp_dir) / "test_folder"
                test_folder.mkdir()
                assert test_folder.exists()
                print("  ‚úì Test cr√©ation dossier")
                
                # Test cr√©ation fichier
                test_file = test_folder / "test.txt"
                test_file.touch()
                assert test_file.exists()
                print("  ‚úì Test cr√©ation fichier")
                
                # Test listage
                items = list(test_folder.iterdir())
                assert len(items) == 1
                print("  ‚úì Test listage contenu")
            
            print("‚úÖ Tous les tests sont pass√©s!")
            
        except Exception as e:
            print(f"‚ùå Erreur dans les tests: {e}")
        
        input("\nAppuyez sur Entr√©e pour continuer...")
    
    def check_environment(self):
        """V√©rifier l'environnement"""
        print("\nüîç V√©rification de l'environnement...")
        
        # V√©rifier les fichiers
        scripts = {
            "mcp_manual_tester.py": "Testeur MCP Manuel",
            "test_simple_audio.py": "Test Audio Simple", 
            "test_openai_connection.py": "Test Connexion OpenAI",
            "voice_controller_final.py": "Contr√¥leur Vocal Final",
            "voice_controller_fixed.py": "Contr√¥leur avec Corrections",
            "mcp_server.py": "Serveur MCP"
        }
        
        print("\nüìÅ Scripts disponibles:")
        all_good = True
        for script, desc in scripts.items():
            script_path = self.base_path / script
            if script_path.exists():
                print(f"  ‚úÖ {script} - {desc}")
            else:
                print(f"  ‚ùå {script} - MANQUANT")
                all_good = False
        
        # V√©rifier les d√©pendances
        print("\nüì¶ D√©pendances Python:")
        deps = ["sounddevice", "numpy", "websockets", "python-dotenv"]
        for dep in deps:
            try:
                __import__(dep.replace("-", "_"))
                print(f"  ‚úÖ {dep}")
            except ImportError:
                print(f"  ‚ùå {dep} - NON INSTALL√â")
                all_good = False
        
        # V√©rifier .env
        env_file = self.base_path / ".env"
        if env_file.exists():
            print(f"  ‚úÖ Fichier .env trouv√©")
        else:
            print(f"  ‚ö†Ô∏è Fichier .env manquant (requis pour OpenAI)")
        
        if all_good:
            print("\n‚úÖ Environnement OK!")
        else:
            print("\n‚ö†Ô∏è Certains √©l√©ments manquent")
        
        input("\nAppuyez sur Entr√©e pour continuer...")
    
    async def run(self):
        """Boucle principale"""
        print("üé§ VOICE FILE CONTROLLER")
        print("="*30)
        print("üéØ Menu principal pour tous les outils")
        
        try:
            while True:
                try:
                    self.show_main_menu()
                    choice = input("\nüëâ Votre choix: ").strip().lower()
                    
                    if choice == 'q':
                        break
                        
                    elif choice == '1':
                        self.run_script("mcp_manual_tester.py", "Testeur MCP Manuel")
                        
                    elif choice == '2':
                        self.run_script("test_simple_audio.py", "Test Audio Simple")
                        
                    elif choice == '3':
                        self.run_script("test_openai_connection.py", "Test Connexion OpenAI")
                        
                    elif choice == '4':
                        self.run_script("voice_to_mcp_controller.py", "Contr√¥leur Vocal ‚Üí MCP")
                        
                    elif choice == '5':
                        self.run_script("voice_controller_final.py", "Contr√¥leur Vocal Final")
                        
                    elif choice == '6':
                        self.run_script("voice_controller_fixed.py", "Contr√¥leur avec Corrections")
                        
                    elif choice == '7':
                        self.run_script("mcp_server.py", "Serveur MCP")
                        
                    elif choice == '8':
                        self.run_tests()
                        
                    elif choice == '9':
                        self.run_script("transcription_debugger.py", "Debugger de Transcription")
                        
                    elif choice == 'h':
                        self.show_help()
                        input("\nAppuyez sur Entr√©e pour continuer...")
                        
                    elif choice == 'env':
                        self.check_environment()
                        
                    else:
                        print("‚ùå Choix invalide. Utilisez 1-7, h, ou q")
                        
                except EOFError:
                    print("\nüëã Au revoir!")
                    break
                    
        except KeyboardInterrupt:
            print("\nüëã Au revoir!")

if __name__ == "__main__":
    import signal
    
    def signal_handler(sig, frame):
        print('\nüëã Arr√™t du programme...')
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    
    try:
        controller = MainController()
        asyncio.run(controller.run())
    except KeyboardInterrupt:
        print("\nüëã Programme arr√™t√©")
