#!/usr/bin/env python3
"""
VOICE BRIDGE FINAL
Interface vocale qui traduit la parole en commandes pour Claude Desktop MCP
"""
import os
import openai
import sounddevice as sd
import numpy as np
import tempfile
import wave
from dotenv import load_dotenv
import pyperclip
import time
import sys

load_dotenv()

class VoiceBridgeFinal:
    def __init__(self):
        self.client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        
        print("üé§ VOICE BRIDGE FINAL")
        print("="*40)
        print("1. Parlez dans le micro")
        print("2. Le texte sera copi√© dans le presse-papier")
        print("3. Collez dans Claude Desktop pour ex√©cution")
        print("="*40)
    
    def record_audio(self, duration=5, sample_rate=44100):
        """Enregistrer l'audio du microphone"""
        print("üî¥ ENREGISTREMENT...")
        print("Parlez maintenant!")
        
        # Affichage du compte √† rebours
        for i in range(duration, 0, -1):
            print(f"‚è±Ô∏è  {i}s restantes", end='\r')
            time.sleep(1)
        
        print("\nüé§ Capture audio...")
        audio = sd.rec(int(duration * sample_rate), samplerate=sample_rate, channels=1)
        sd.wait()
        return audio, sample_rate
    
    def transcribe_audio(self, audio, sample_rate):
        """Transcrire l'audio via OpenAI Whisper"""
        print("üîÑ Transcription en cours...")
        
        with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp:
            # Convertir en fichier WAV
            with wave.open(tmp.name, 'wb') as wf:
                wf.setnchannels(1)
                wf.setsampwidth(2)
                wf.setframerate(sample_rate)
                wf.writeframes((audio * 32767).astype(np.int16).tobytes())
            
            # Transcription
            with open(tmp.name, 'rb') as audio_file:
                transcript = self.client.audio.transcriptions.create(
                    model="whisper-1", 
                    file=audio_file, 
                    language="fr"
                )
            
            os.unlink(tmp.name)
            return transcript.text
    
    def create_claude_prompt(self, voice_command):
        """Cr√©er un prompt optimis√© pour Claude Desktop"""
        prompt = f"""Commande vocale re√ßue: "{voice_command}"

Utilise les outils MCP voice-file-controller disponibles pour ex√©cuter cette demande:

- create_folder: pour cr√©er des dossiers
- create_file: pour cr√©er des fichiers  
- list_contents: pour lister le contenu

Exemples de traduction:
- "cr√©e un dossier projet" ‚Üí create_folder avec folder_path="projet"
- "cr√©e 3 dossiers" ‚Üí cr√©er 3 dossiers avec des noms logiques
- "cr√©e un fichier readme" ‚Üí create_file avec file_path="readme.txt"
- "montre le bureau" ‚Üí list_contents

Ex√©cute imm√©diatement la commande avec les outils appropri√©s."""

        return prompt
    
    def copy_to_clipboard(self, text):
        """Copier le texte dans le presse-papier"""
        try:
            pyperclip.copy(text)
            print("‚úÖ Prompt copi√© dans le presse-papier!")
            print("üëâ Collez maintenant dans Claude Desktop (Cmd+V)")
            return True
        except Exception as e:
            print(f"‚ùå Erreur copie: {e}")
            return False
    
    def run_voice_session(self):
        """Session vocale compl√®te"""
        try:
            # 1. Enregistrement
            audio, sr = self.record_audio()
            
            # 2. Transcription
            text = self.transcribe_audio(audio, sr)
            print(f"üìù Vous avez dit: '{text}'")
            
            if not text.strip():
                print("‚ùå Aucun texte d√©tect√©")
                return
            
            # 3. Cr√©ation du prompt
            prompt = self.create_claude_prompt(text)
            
            # 4. Copie dans le presse-papier
            if self.copy_to_clipboard(prompt):
                print("\n" + "="*50)
                print("PROMPT G√âN√âR√â:")
                print("="*50)
                print(prompt)
                print("="*50)
                print("\nüéØ Maintenant dans Claude Desktop:")
                print("1. Ouvrez une conversation")
                print("2. Collez avec Cmd+V")
                print("3. Appuyez sur Entr√©e")
                print("4. Regardez les outils s'ex√©cuter!")
            
        except Exception as e:
            print(f"‚ùå Erreur session: {e}")
    
    def run_continuous(self):
        """Mode continu pour d√©mo"""
        print("\nüîÑ MODE CONTINU")
        print("Entr√©e = nouvelle commande, 'q' = quitter")
        
        while True:
            try:
                choice = input("\nüëâ Appuyez sur Entr√©e pour parler (q pour quitter): ")
                if choice.lower() == 'q':
                    break
                
                self.run_voice_session()
                
            except KeyboardInterrupt:
                print("\nüëã Au revoir!")
                break

if __name__ == "__main__":
    # V√©rifier les d√©pendances
    try:
        import pyperclip
    except ImportError:
        print("‚ùå Installez pyperclip: pip install pyperclip")
        sys.exit(1)
    
    # V√©rifier la cl√© API
    if not os.getenv('OPENAI_API_KEY'):
        print("‚ùå OPENAI_API_KEY non d√©finie dans .env")
        sys.exit(1)
    
    bridge = VoiceBridgeFinal()
    
    print("\nüéõÔ∏è MODES DISPONIBLES:")
    print("1 - Session unique")
    print("2 - Mode continu")
    
    choice = input("üëâ Choix: ")
    
    if choice == "1":
        bridge.run_voice_session()
    elif choice == "2":
        bridge.run_continuous()
    else:
        print("Test rapide...")
        bridge.run_voice_session()